name: Build and Publish .NET Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # This can be changed to windows-latest if you're targeting Windows

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2  # Ensures the repo is checked out for the workflow

    - name: Set up .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.x'  # You can adjust this if you want a different version of .NET (e.g., '5.x' or '3.1')

    - name: Restore dependencies
      run: dotnet restore Ro.Npgsql.Data.sln  # Restore dependencies for the whole solution

    - name: Build the solution
      run: dotnet build Ro.Npgsql.Data.sln --configuration Release  # Build the solution in Release mode

    - name: Publish the package
      run: dotnet publish Ro.Npgsql.Data.sln --configuration Release --output ./publish  # Publish the solution

    - name: Create a Release Package (optional)
      run: |
        cd ./publish
        zip -r ../package.zip .  # This creates a zip file of the published output

    - name: Upload package as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: release-package
        path: package.zip  # Uploads the package zip as an artifact

    - name: Push NuGet Package to GitHub Packages (optional)
      run: |
        dotnet nuget push ./publish/*.nupkg --source "github" --api-key ${{secrets.ROCK_TOKEN}}

